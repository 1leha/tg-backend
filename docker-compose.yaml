version: '3.5'

services:
  # db
  tg_postgres:
    container_name: tg_postgres
    image: postgres:14.0-alpine
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /data/postgres
    volumes:
      - pgdata:/var/www/tg_postgres/docker-volumes/data
    ports:
      - ${DB_PORT}:${DB_PORT}

    networks:
      - tg_postgres
    restart: unless-stopped

  # pg admin
  tg_postgres_pgadmin:
    container_name: tg_postgres_pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${DB_USERNAME}@admin.com
      PGADMIN_DEFAULT_PASSWORD: ${DB_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/www/tg_postgres/docker-volumes/pgadmin
    ports:
      - '5050:80'
    networks:
      - tg_postgres
    restart: unless-stopped

  # backend
  backend:
    container_name: tg-api
    build:
      dockerfile: Dockerfile
      context: .
    depends_on:
      - tg_postgres

    environment:
      NODE_ENV: development
      API_HOST: ${API_HOST}
      API_PORT: ${API_PORT}

      DB_HOST: tg_postgres
      DB_PORT: ${DB_PORT}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}

      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRE: ${JWT_EXPIRE}
      SALT: ${SALT}

    ports:
      - ${API_PORT}:${API_PORT}
    networks:
      - tg_postgres

networks:
  tg_postgres:

volumes:
  pgdata:
  pgadmin:
